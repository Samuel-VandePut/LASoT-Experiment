package be.unamur.game2048;
import org.junit.Assert;
import org.junit.Test;
import static org.junit.Assert.*;
public class Test2048 {
    /* TEST CONTROLLER */
    @org.junit.Test
    public void testStartGameFirstTileNotNull() {
        be.unamur.game2048.controllers.GameController controller = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testStartGameFirstTileNotNull()|0", be.unamur.game2048.controllers.GameController.class, new be.unamur.game2048.controllers.GameController());
        eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testStartGameFirstTileNotNull()|1", be.unamur.game2048.controllers.GameController.class, controller).startGame();
        be.unamur.game2048.models.Grid grid = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testStartGameFirstTileNotNull()|3", be.unamur.game2048.models.Grid.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testStartGameFirstTileNotNull()|2", be.unamur.game2048.controllers.GameController.class, controller).getGrid());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testStartGameFirstTileNotNull()|5", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testStartGameFirstTileNotNull()|4", be.unamur.game2048.models.Grid.class, grid).getTile(0)));
    }

    @org.junit.Test
    public void testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam() {
        be.unamur.game2048.controllers.GameController controller = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|0", be.unamur.game2048.controllers.GameController.class, new be.unamur.game2048.controllers.GameController());
        eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|1", be.unamur.game2048.controllers.GameController.class, controller).startGame();
        be.unamur.game2048.models.Grid grid = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|3", be.unamur.game2048.models.Grid.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|2", be.unamur.game2048.controllers.GameController.class, controller).getGrid());
        int count = 0;
        for (int row = 0; eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|4", row) < be.unamur.game2048.models.GameParams.sideLength; row++) {
            for (int col = 0; eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|5", col) < be.unamur.game2048.models.GameParams.sideLength; col++) {
                if (eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|9", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|6", be.unamur.game2048.models.Grid.class, grid).getTile(eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|7", row), eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|8", col))) != null) {
                    count++;
                }
            }
        }
        org.junit.Assert.assertEquals(be.unamur.game2048.models.GameParams.nbStartTileFilled, eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testStartGameNumberOfTileAddedEqualsNbStartTileFilledGameParam()|10", count));// Peut essayer un assertTrue(count <= GameParams.nbStartTileFilled)

    }

    @org.junit.Test
    public void testFillFirstEmptyTileFalseOnFullGrid() {
        // --- Initialize full grid
        be.unamur.game2048.models.Tile[][] tiles = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|0", be.unamur.game2048.models.Tile[][].class, new be.unamur.game2048.models.Tile[be.unamur.game2048.models.GameParams.sideLength][be.unamur.game2048.models.GameParams.sideLength]);
        for (int pos = 0; eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|1", pos) < (be.unamur.game2048.models.GameParams.sideLength * be.unamur.game2048.models.GameParams.sideLength); pos++) {
            int row = eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|2", pos) / be.unamur.game2048.models.GameParams.sideLength;
            int col = eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|3", pos) % be.unamur.game2048.models.GameParams.sideLength;
            eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|8", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|6", be.unamur.game2048.models.Tile[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|4", be.unamur.game2048.models.Tile[][].class, tiles)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|5", row)])[eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|7", col)] = new be.unamur.game2048.models.Tile(2));
        }
        be.unamur.game2048.controllers.GameController controller = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|9", be.unamur.game2048.controllers.GameController.class, new be.unamur.game2048.controllers.GameController());
        // --- Start game
        eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|10", be.unamur.game2048.controllers.GameController.class, controller).startGame(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|11", be.unamur.game2048.models.Tile[][].class, tiles));
        // --- Assert controller cannot add more tile
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testFillFirstEmptyTileFalseOnFullGrid()|12", be.unamur.game2048.controllers.GameController.class, controller).fillFirstEmptyTile()));
    }

    @org.junit.Test
    public void testNoMoveAvailableOnFullGridWithNoMergingPossibility() {
        // --- Initialize full grid
        be.unamur.game2048.models.Tile[][] tiles = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|20", be.unamur.game2048.models.Tile[][].class, new be.unamur.game2048.models.Tile[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|4", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|2", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(8)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|3", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(16)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|9", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|5", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(32)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|6", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(64)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|7", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(128)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|8", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|14", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|10", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|11", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|12", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(8)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|13", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(16)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|19", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|15", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(32)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|16", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(64)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|17", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(128)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|18", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256)) }) });
        be.unamur.game2048.controllers.GameController controller = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|21", be.unamur.game2048.controllers.GameController.class, new be.unamur.game2048.controllers.GameController());
        // --- Start game
        eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|22", be.unamur.game2048.controllers.GameController.class, controller).startGame(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|23", be.unamur.game2048.models.Tile[][].class, tiles));
        // --- Assert controller cannot add more tile
        org.junit.Assert.assertFalse(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|24", be.unamur.game2048.controllers.GameController.class, controller).moveUp(true)) && eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|26", be.unamur.game2048.controllers.GameController.class, controller).moveRight(true))) && eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|28", be.unamur.game2048.controllers.GameController.class, controller).moveDown(true))) && eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testNoMoveAvailableOnFullGridWithNoMergingPossibility()|30", be.unamur.game2048.controllers.GameController.class, controller).moveLeft(true)));
        /* Assert.assertFalse(controller.moveUp(true));
        Assert.assertFalse(controller.moveRight(true));
        Assert.assertFalse(controller.moveDown(true));
        Assert.assertFalse(controller.moveLeft(true));
         */
    }

    @org.junit.Test
    public void testMoveAvailableOnFullGridWithMergingPossibility() {
        // --- Initialize full grid
        be.unamur.game2048.models.Tile[][] tiles = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|20", be.unamur.game2048.models.Tile[][].class, new be.unamur.game2048.models.Tile[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|4", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|2", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(8)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|3", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(16)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|9", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|5", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(32)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|6", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(64)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|7", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(64)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|8", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|14", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|10", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|11", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|12", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(128)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|13", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(16)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|19", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|15", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(32)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|16", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(64)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|17", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(128)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|18", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256)) }) });
        be.unamur.game2048.controllers.GameController controller = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|21", be.unamur.game2048.controllers.GameController.class, new be.unamur.game2048.controllers.GameController());
        // --- Start game
        eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|22", be.unamur.game2048.controllers.GameController.class, controller).startGame(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|23", be.unamur.game2048.models.Tile[][].class, tiles));
        // --- Assert controller cannot add more tile
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|24", be.unamur.game2048.controllers.GameController.class, controller).moveUp(true)) || eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|26", be.unamur.game2048.controllers.GameController.class, controller).moveRight(true))) || eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|28", be.unamur.game2048.controllers.GameController.class, controller).moveDown(true))) || eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnFullGridWithMergingPossibility()|30", be.unamur.game2048.controllers.GameController.class, controller).moveLeft(true)));
    }

    @org.junit.Test
    public void testMoveAvailableOnNonFullGrid() {
        // --- Initialize full grid
        be.unamur.game2048.models.Tile[][] tiles = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|18", be.unamur.game2048.models.Tile[][].class, new be.unamur.game2048.models.Tile[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|4", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|2", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(8)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|3", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(16)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|8", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|5", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(32)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|6", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(64)), null, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|7", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|12", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|9", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|10", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(8)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|11", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(16)) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|17", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|13", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(32)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|14", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(64)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|15", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(128)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|16", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256)) }) });
        be.unamur.game2048.controllers.GameController controller = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|19", be.unamur.game2048.controllers.GameController.class, new be.unamur.game2048.controllers.GameController());
        // --- Start game
        eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|20", be.unamur.game2048.controllers.GameController.class, controller).startGame(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|21", be.unamur.game2048.models.Tile[][].class, tiles));
        // --- Assert controller cannot add more tile
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|22", be.unamur.game2048.controllers.GameController.class, controller).moveUp(true)) && eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|24", be.unamur.game2048.controllers.GameController.class, controller).moveRight(true))) && eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|26", be.unamur.game2048.controllers.GameController.class, controller).moveDown(true))) && eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.controllers.GameController>observeState("be.unamur.game2048.Test2048|testMoveAvailableOnNonFullGrid()|28", be.unamur.game2048.controllers.GameController.class, controller).moveLeft(true)));
    }

    /* TEST TILE */
    @org.junit.Test
    public void testCanMergeWithTwoDifferentsTileValue() {
        be.unamur.game2048.models.Tile tile1 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testCanMergeWithTwoDifferentsTileValue()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2));
        be.unamur.game2048.models.Tile tile2 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testCanMergeWithTwoDifferentsTileValue()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testCanMergeWithTwoDifferentsTileValue()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testCanMergeWithTwoDifferentsTileValue()|2", be.unamur.game2048.models.Tile.class, tile1).canMergeWith(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testCanMergeWithTwoDifferentsTileValue()|3", be.unamur.game2048.models.Tile.class, tile2))));
    }

    @org.junit.Test
    public void testCanMergeTileWithTwoSameTileValue() {
        be.unamur.game2048.models.Tile tile1 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testCanMergeTileWithTwoSameTileValue()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2));
        be.unamur.game2048.models.Tile tile2 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testCanMergeTileWithTwoSameTileValue()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testCanMergeTileWithTwoSameTileValue()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testCanMergeTileWithTwoSameTileValue()|2", be.unamur.game2048.models.Tile.class, tile1).canMergeWith(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testCanMergeTileWithTwoSameTileValue()|3", be.unamur.game2048.models.Tile.class, tile2))));
    }

    @org.junit.Test
    public void testMergeWith() {
        // --- Initialize tiles
        be.unamur.game2048.models.Tile tile1 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMergeWith()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2));
        be.unamur.game2048.models.Tile tile2 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMergeWith()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2));
        // --- Act
        int result = eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMergeWith()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMergeWith()|2", be.unamur.game2048.models.Tile.class, tile1).mergeWith(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMergeWith()|3", be.unamur.game2048.models.Tile.class, tile2)));
        // --- Assert
        // Assert.assertEquals(tile1.getValue(), result);
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMergeWith()|5", result) > 0);
    }

    @org.junit.Test
    public void testMergeWithResultOnImpossibleMerging() {
        be.unamur.game2048.models.Tile tile1 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMergeWithResultOnImpossibleMerging()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2));
        be.unamur.game2048.models.Tile tile2 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMergeWithResultOnImpossibleMerging()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4));
        int result = eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMergeWithResultOnImpossibleMerging()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMergeWithResultOnImpossibleMerging()|2", be.unamur.game2048.models.Tile.class, tile1).mergeWith(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testMergeWithResultOnImpossibleMerging()|3", be.unamur.game2048.models.Tile.class, tile2)));
        // --- Assert
        // Assert.assertEquals(-1, result);
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testMergeWithResultOnImpossibleMerging()|5", result) != 0);
    }

    /* TEST GRID */
    @org.junit.Test
    public void testGetTileWithPosition() {
        // --- Initialize one tile grid
        be.unamur.game2048.models.Tile tile = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256));
        be.unamur.game2048.models.Tile[][] tiles = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|6", be.unamur.game2048.models.Tile[][].class, new be.unamur.game2048.models.Tile[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|1", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|3", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|2", be.unamur.game2048.models.Tile.class, tile) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|4", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|5", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }) });
        // --- Act
        be.unamur.game2048.models.Grid grid = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|8", be.unamur.game2048.models.Grid.class, new be.unamur.game2048.models.Grid(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|7", be.unamur.game2048.models.Tile[][].class, tiles)));
        be.unamur.game2048.models.Tile t = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|10", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|9", be.unamur.game2048.models.Grid.class, grid).getTile(7));
        // --- Assert
        // Assert.assertEquals(tile,t);
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testGetTileWithPosition()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|11", be.unamur.game2048.models.Tile.class, t).getValue()) == eu.stamp_project.reneri.instrumentation.StateObserver.observe("be.unamur.game2048.Test2048|testGetTileWithPosition()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithPosition()|13", be.unamur.game2048.models.Tile.class, tile).getValue()));
    }

    @org.junit.Test
    public void testGetTileWithRowAndCol() {
        // --- Initialize one tile grid
        be.unamur.game2048.models.Tile tile = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256));
        be.unamur.game2048.models.Tile[][] tiles = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|6", be.unamur.game2048.models.Tile[][].class, new be.unamur.game2048.models.Tile[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|1", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|3", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|2", be.unamur.game2048.models.Tile.class, tile) }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|4", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|5", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }) });
        // --- Act
        be.unamur.game2048.models.Grid grid = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|8", be.unamur.game2048.models.Grid.class, new be.unamur.game2048.models.Grid(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|7", be.unamur.game2048.models.Tile[][].class, tiles)));
        be.unamur.game2048.models.Tile t = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|10", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|9", be.unamur.game2048.models.Grid.class, grid).getTile(1, 3));
        // --- Assert
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|11", be.unamur.game2048.models.Tile.class, tile), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetTileWithRowAndCol()|12", be.unamur.game2048.models.Tile.class, t));
    }

    @org.junit.Test
    public void testSetTile() {
        // --- Initialize one tile grid
        be.unamur.game2048.models.Tile tile = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testSetTile()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256));
        be.unamur.game2048.models.Tile[][] tiles = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testSetTile()|5", be.unamur.game2048.models.Tile[][].class, new be.unamur.game2048.models.Tile[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testSetTile()|1", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testSetTile()|2", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testSetTile()|3", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testSetTile()|4", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ null, null, null, null }) });
        // --- Act
        be.unamur.game2048.models.Grid grid = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testSetTile()|7", be.unamur.game2048.models.Grid.class, new be.unamur.game2048.models.Grid(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testSetTile()|6", be.unamur.game2048.models.Tile[][].class, tiles)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testSetTile()|8", be.unamur.game2048.models.Grid.class, grid).setTile(7, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testSetTile()|9", be.unamur.game2048.models.Tile.class, tile));
        // --- Assert
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testSetTile()|10", be.unamur.game2048.models.Tile.class, tile), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testSetTile()|12", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testSetTile()|11", be.unamur.game2048.models.Grid.class, grid).getTile(7)));
    }

    @org.junit.Test
    public void testGetCol() {
        // --- Initialize one tile grid
        be.unamur.game2048.models.Tile[] tileCol = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|4", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetCol()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(2)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetCol()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(4)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetCol()|2", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(8)), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetCol()|3", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(16)) });
        be.unamur.game2048.models.Tile[][] tiles = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testGetCol()|17", be.unamur.game2048.models.Tile[][].class, new be.unamur.game2048.models.Tile[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|7", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetCol()|6", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|5", be.unamur.game2048.models.Tile[].class, tileCol)[0]), null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|10", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetCol()|9", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|8", be.unamur.game2048.models.Tile[].class, tileCol)[1]), null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|13", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetCol()|12", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|11", be.unamur.game2048.models.Tile[].class, tileCol)[2]), null, null, null }), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|16", be.unamur.game2048.models.Tile[].class, new be.unamur.game2048.models.Tile[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testGetCol()|15", be.unamur.game2048.models.Tile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|14", be.unamur.game2048.models.Tile[].class, tileCol)[3]), null, null, null }) });
        // --- Act
        be.unamur.game2048.models.Grid grid = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testGetCol()|19", be.unamur.game2048.models.Grid.class, new be.unamur.game2048.models.Grid(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[][]>observeState("be.unamur.game2048.Test2048|testGetCol()|18", be.unamur.game2048.models.Tile[][].class, tiles)));
        be.unamur.game2048.models.Tile[] col = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|21", be.unamur.game2048.models.Tile[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Grid>observeState("be.unamur.game2048.Test2048|testGetCol()|20", be.unamur.game2048.models.Grid.class, grid).getCol(0));
        // --- Assert
        // Test without notnull
        // Assert.assertEquals(tileCol,col);
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile[]>observeState("be.unamur.game2048.Test2048|testGetCol()|22", be.unamur.game2048.models.Tile[].class, col));
    }

    @org.junit.Test
    public void testTileNotEquals() {
        // --- Initialize one tile grid
        be.unamur.game2048.models.Tile tile1 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testTileNotEquals()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256));
        be.unamur.game2048.models.Tile tile2 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testTileNotEquals()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(128));
        // --- Assert
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testTileNotEquals()|2", be.unamur.game2048.models.Tile.class, tile1), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testTileNotEquals()|3", be.unamur.game2048.models.Tile.class, tile2));
    }

    @org.junit.Test
    public void testTileEquals() {
        // --- Initialize one tile grid
        be.unamur.game2048.models.Tile tile1 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testTileEquals()|0", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256));
        be.unamur.game2048.models.Tile tile2 = eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testTileEquals()|1", be.unamur.game2048.models.Tile.class, new be.unamur.game2048.models.Tile(256));
        // --- Assert
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testTileEquals()|2", be.unamur.game2048.models.Tile.class, tile1), eu.stamp_project.reneri.instrumentation.StateObserver.<be.unamur.game2048.models.Tile>observeState("be.unamur.game2048.Test2048|testTileEquals()|3", be.unamur.game2048.models.Tile.class, tile2));
    }
}